import 'dotenv/config';
import postgres from 'postgres';
import connectPg from 'connect-pg-simple';
import session from 'express-session';

async function testProductionConnection() {
  console.log('üîç Testando conex√£o com PostgreSQL em produ√ß√£o...');
  
  const productionDbUrl = process.env.PROD_DATABASE_URL || process.env.DATABASE_URL;
  
  if (!productionDbUrl) {
    console.error('‚ùå PROD_DATABASE_URL n√£o encontrada!');
    process.exit(1);
  }
  
  console.log('üîó URL do banco:', productionDbUrl.replace(/:\/\/[^:]+:[^@]+@/, '://***:***@'));
  
  try {
    // Teste 1: Conex√£o direta com postgres
    console.log('\nüì° Teste 1: Conex√£o direta com postgres...');
    
    // Remove configura√ß√µes SSL da URL e adiciona sslmode=require
    let cleanDbUrl = productionDbUrl.replace(/[?&]ssl(mode)?=[^&]*/g, '');
    cleanDbUrl += cleanDbUrl.includes('?') ? '&sslmode=require' : '?sslmode=require';
    
    const sql = postgres(cleanDbUrl, {
      ssl: { 
        rejectUnauthorized: false,
        requestCert: false,
        agent: false
      },
      max: 1,
      connect_timeout: 30
    });
    
    const result = await sql`SELECT version()`;
    console.log('‚úÖ Conex√£o direta bem-sucedida!');
    console.log('üìä Vers√£o do PostgreSQL:', result[0].version.split(' ')[0]);
    await sql.end();
    
    // Teste 2: Conex√£o com connect-pg-simple
    console.log('\nüì° Teste 2: Conex√£o com connect-pg-simple...');
    const pgStore = connectPg(session);
    
    let dbUrl = productionDbUrl;
    // Remove qualquer configura√ß√£o SSL existente da URL e adiciona sslmode=require
    dbUrl = dbUrl.replace(/[?&]ssl(mode)?=[^&]*/g, '');
    dbUrl += dbUrl.includes('?') ? '&sslmode=require' : '?sslmode=require';
    
    const sessionStore = new pgStore({
      conString: dbUrl,
      createTableIfMissing: true,
      ttl: 7 * 24 * 60 * 60 * 1000,
      tableName: "sessions_test",
      ssl: {
        rejectUnauthorized: false,
        requestCert: false,
        agent: false
      },
    });
    
    // Aguardar um pouco para a conex√£o ser estabelecida
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('‚úÖ Conex√£o com connect-pg-simple bem-sucedida!');
    console.log('üéâ Todas as conex√µes funcionaram corretamente!');
    
  } catch (error) {
    console.error('‚ùå Erro na conex√£o:', error);
    
    if (error.message.includes('self-signed certificate')) {
      console.log('\nüîß Sugest√µes para resolver o erro de certificado SSL:');
      console.log('1. Verificar se NODE_TLS_REJECT_UNAUTHORIZED=0 est√° definido');
      console.log('2. Verificar configura√ß√µes SSL no c√≥digo');
      console.log('3. Verificar se o RDS permite conex√µes SSL com certificados auto-assinados');
    }
    
    process.exit(1);
  }
}

testProductionConnection();